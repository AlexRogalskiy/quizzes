
from math import *;

digits = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

adjacency = 13
ix_start = 0;

def prod(digits, _from, _to):
	product = 1;
	while _from < _to:
		product *= int(digits[_from])
		_from += 1;
	return product;

current_product = prod(digits, ix_start, adjacency);
ix_start += adjacency;
max_product = current_product;
# print 'ix_start ' + str(ix_start)

while ix_start + adjacency < len(digits):
	
	current_digit = int(digits[ix_start])
	last_digit = int(digits[ix_start-1])

	#print digits[ix_start:ix_start+adjacency] + \
	#				' ix_start ' + str(ix_start) + \
	#				' digits[ix_start] ' + digits[ix_start] + \
	#				' digits[ix_start-1] ' + digits[ix_start-1] + \
	#				' current_digit ' + str(current_digit) + \
	#				' last_digit ' + str(last_digit),

	if (current_digit == 0):
		current_product = 0;
		ix_start += 1;
		continue;

	# if (current_product == 0):
	current_product = prod(digits, ix_start, ix_start + adjacency);
	# else:
	# 	current_product = max(1, current_product)  * current_digit / max(1, last_digit)

	# print ' current_product ' + str(current_product)

	if (current_product > max_product):
		max_product = current_product

	ix_start += 1;

print 'The maximum product is: {0}'.format(max_product)